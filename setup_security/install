#!/bin/bash

#
# Enable basic security for Linux
#
# Does the following:
#    o Enable automatic download and install of security related system updates
#    o Run automatic installation of security updates right now
#    o Backup and (re-)configure IP tables so that only incoming requests from 
#      internal networks are permitted
# 
# Tested on Ubuntu 16.04.02
#
# crmurphy, 25/07/17
#

set -u    # Die if trying to access variables that are undefined
set -e    # Exit if any command has a non-zero return value

DATE=$(date +"%Y%m%d%H%M%S")
BKP_DIR="/var/backups/iptables"
ORIG_DIR=$(pwd)
SCRPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"


print_exit() {
    printf "\n${1}\n"
    exit 1
}


get_user_input() {
    # Ask the user for input, lower case it, and assign it to a supplied variable
    #  $1 is the question to send to the users terminal
    #  $2 is the default response if the user only presses return
    #  $3 is the timeout for the question (will full exit on timeout)
    #  $4 is the variable that stores the response for retrieval outside this func
    #  $5 is the error to print to the screen if a timeout occurs
    # Requires function print_exit()
    read -t "$3" -p "$1" var || print_exit "$5"
    var=${var:-$2}
    var=$(echo ${var} | tr '[:upper:]' '[:lower:]')
    eval $4=$var
}


check_for_root() {
    if [[ $EUID != 0 ]]; then
        echo "Please try again using sudo or with root permissions."
        exit 1
    fi
}


setup_auto_update() {
    apt install unattended-upgrades
    echo
    echo "In the screen the follows, select 'yes' followed by 'ok'."
    read -p "Press return to continue... "
    echo
    
    dpkg-reconfigure unattended-upgrades
    unattended-upgrades
}


setup_iptables() {
    # Backup current config
    [[ -d ${BKP_DIR} ]] || mkdir ${BKP_DIR}
    iptables-save > ${BKP_DIR}/ip4tables_bkup_${DATE}.txt
    ip6tables-save > ${BKP_DIR}/ip6tables_bkup_${DATE}.txt
    echo "Backed up current config to "${BKP_DIR}"/ip*tables_bkup_"${DATE}".txt" 
    echo "Restore using 'iptables-restore' if needed"
    
    # Allow access from localhost to localhost
    echo "Enabling access to/from localhost..."
    iptables -A INPUT -i lo -j ACCEPT
    
    # Allow private IPv4 subnets
    echo "Enabling access to/from private IPv4 networks..."
    iptables -A INPUT -s 192.168.0.0/16 -j ACCEPT
    iptables -A INPUT -s 10.0.0.0/8 -j ACCEPT
    iptables -A INPUT -s 169.254.0.0/16 -j ACCEPT
    iptables -A INPUT -s 172.16.0.0/12 -j ACCEPT
    
    # Allow traffic from already established connections
    echo "Allowing traffic for established connections..."
    iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    
    # Block everything else. Note that the above rules come before the block
    # and therefore take precedence 
    echo "Blocking all other IPv4 traffic..."
    iptables -A INPUT -j DROP
    
    # Block all IPv6 traffic. It's not used anywhere that I know of.
    echo "Blocking all IPv6 traffic globally..."
    ip6tables -A INPUT -j DROP
    
    # Setup logging to write to syslog on packet drop
    echo "Enabling logging to syslog..."
    iptables -I INPUT 5 -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7

    echo "Done."
}

main() {
    check_for_root

    cd ${SCRPT_DIR}

    echo
    echo "This script will do 3 things:"
    echo "    - Enable automatic installation of security related system updates"
    echo "    - Run the updates immediately"
    echo "    - Backup and (re-)configure iptables so that only private (internal)"
    echo "      IP addresses can initiate inbound connections NOTE: assumes that no" 
    echo "      iptables rules are configured already. If there is an existing"
    echo "      config there maybe unpredictable results."
    echo
    yesno=
    get_user_input "Continue? [Y|n]: "  "y" 15 yesno "Timeout occured. Exiting."

    if [[ $yesno == "y" ]]; then
        setup_auto_update
        setup_iptables

    elif [[ $yesno == "n" ]]; then
        echo "Ok. Nothing was changed."
        cd ${ORIG_DIR}
        exit
    else
        echo "Please enter either 'y' or 'n'."
        echo "Nothing was changed."
        cd ${ORIG_DIR}
        exit
    fi

    cd ${ORIG_DIR} >/dev/null
}

main

